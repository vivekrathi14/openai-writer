import { Configuration, OpenAIApi } from "openai";

/**
 * Method to call OpenAI API on the basis of prompt value
 * @param {*} promptValue The prompt value to be passed to the API
 * @returns Text generated by the API
 */
const openAIChatWrapper = async (promptValue) => {

  const configuration = new Configuration({
    apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
  });
  const openai = new OpenAIApi(configuration);

  const completion = await openai.createChatCompletion({
    model: process.env.NEXT_PUBLIC_OPENAI_API_MODEL,
    messages: [{ "role": "assistant", "content": "You are a helpful assistant." }, { role: "user", content: promptValue }],
  });

  return completion.data.choices[0].message.content;
};

/**
 * Method to get the styled text from the OpenAI API
 * Values for context: summarize, vocab, and improve
 * @param {*} content Text to be styled
 * @returns Styled text returned by the API
 */
export const getStyledText = async (content, context) => {
    let promptValue = `Below content is part of a writing article.`
    switch (context) {
      case "summarize":
        promptValue += `Summarize the below content. \n "${content}"`;
        break;
      case "vocab":
        promptValue += `Provide some good vocabulary suggestions for the below content as a list of words with their mapping from existing words in article. \n "${content}"`;
        break;
      case "improve":
        promptValue += `Improve the below content by making it even better. \n "${content}"`;
        break;
      default:
        return content;
    }
    const styledContent = openAIChatWrapper(promptValue);
    return styledContent;
}

/**
 * Method to get the tone suggestion from the OpenAI API
 * Values for context: professional, funny, and casual
 * @param {*} content Text to change the tone
 * @param {*} context Tone style to be applied
 * @returns 
 */
export const getToneSuggestion = async (content, context) => {
    const tonePrompt = `Paraphrase below text in ${context} tone. \n "${content}"`;
    const toneContent = openAIChatWrapper(tonePrompt);
    return toneContent;
}

export default openAIChatWrapper;
